Video17 -> Hızlıcı vuejs'i terminala kurduk ve genel olarak ekranları gösteri.
    1.) npm install -g @vue-clie --> vuejs indirmek için
    2.) vue init webpack-simple vuejs-plalist -> burada hızlıca webpack-simple template kullanarak basitçe playlist adında bir proje oluşturdu
    3.) playlist içerisine girip npm install diyerek bağımlılıkları kurduk
    4.) npm run dev diyerek projeyi ayağa kaldırdı

Video18 -> Burada genel olarak proje yapısını inceledik ve birazda app.vue ile uğraştık
    1.) src içerisinde assets dosyası olduğunu ve buraya imagelerin koyuabilecğeini söyledi
    2.) Yine src altında appv.ve ve main js olduğunu gördük.
        2.a) app.vue --> burada bir anladığıma göre (burasını netleştir) bir component yapısı oluşturulmuş ve içerisine 
            vue js kodları gömülmüş. İlk açıldığında template'leri görebiliyoruz. Burası app.veu'nın çalışma alanı olarak
            kullandığı kısım. Daha sonra export default içerisinde component (burasını netleştir) oluşturulmuş ve template
            kısmı buradan besleniyor ve aşağıda sonra olarak css komutları barındırılıyor.
        2.b) main.js --> Burada 2 tane import görüyorsun ilk node_modules'lerin içerisinden diğer ise app.vue'u import etmektedir.
            Daha sonra bir vue nesnesi oluştumuş ve tag olarak "#app" verdiğini ve render olarak'da app.vue'yı render etmesi 
            gerektiğini anlatan bir komut gördük. Burada main.js app.js ve index.html ara katman olarak gelip hızlıcı app.js'i okuyup
            daha sonra bunu index.html basıyor.

Video19 -> Nesting component burada birden fazla parçalı component oluştumuş bunu local yada global şekilde mevcut projeyle
        entegre etmeye gösteri. Ben örnek olarak statik.vue ve dinamik.vue adında oluşturdum. Daha sonra dinamik olan için
        genel olarak yapıyı oluşturup main.js içerisine tanımlayıp import ettim sonra app.vue içerisine ilgili isimle tagini açtım
        . Benzer mantıkla Statik vue'yi doğruan app.vue içerisine ekleyip app.vue'nun kendi objesi içersine alanı açıp dahil ettim.

Video20 -> Component CSS (Scoped) her bir *.vue içerisinde genel olarak template , script ve style tagları mevcut ve genelde
    style içerisine birşeyler yazarsın ve bu yazdıkların template içerisindekinin görütüsünün değiştirir. Fakat bunlar ana 
    main.js'de bir araya getirilip index.html tarafta ekrana basıldığında css komutları birbirini ezebilir. Arka planda olan
    her *.vue için index.html <style src> açılır ve tek tek import edilir tarayıcı bunlara baktığında eğer aynı taglar varsa
    en alta olan üstekiler ezer şeklide gider --> {a.vue -> h1 -> color:red ,b.vue -> h1 -> color:bue }  } Bu sorunu çözmek içerisine
    *.vue içerisine girip <style scoped> yapmak yeterli olacaktır. Fakat burada benim aklıma ilk gelen *.vue içerine id verip
    onun göre css yazmaktır. {<div id="main"> , #main h1 { color:red} } şeklinde yapmak daha sağlıklı geldi (Css.vue içerisinde yaptım)
    App.vue'de h1'lerin rengini değiştiridim (burada scoped kullandım) , Css.vue ise id mantığıyla yaptım
